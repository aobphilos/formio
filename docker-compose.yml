# Allows us to start the stack without touching too much of our local system
#
# note: the application initialization will download/unpack/configure files
#       in the local directory...
#
# ##### Usage:
# *0. Create a broken symlink: `ln -sf "/.npm-packages/node_modules/" node_modules`
# 1. Start the database: `docker-compose up -d mongo`
# 2. Start the application:  `docker-compose run formio`
# [3]. Stop the database: `docker-compose down` (add --volumes to clear data)
# [4]. Remove lingering docker images: `docker-compose down -v --rmi all`
#
# *TODO: Step 0 is for the bcrypt binary compiled on alpine, which is required...
#        but this step feels like an anti-pattern and a better approach should be found

version: "3.7"
services:
  # nginx:
  #   image: nginx:latest
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - formio

  mongo:
    image: mongo:6
    restart: always
    volumes:
      - mdb-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME:
      MONGO_INITDB_ROOT_PASSWORD:

  formio:
    build: ./
    # The app will restart until Mongo is listening
    restart: always
    links:
      - mongo
    expose:
      - 3001
    volumes:
      - ./:/app:rw
    environment:
      VIRTUAL_HOST: forms.eastasia.cloudapp.azure.com
      LETSENCRYPT_HOST: forms.eastasia.cloudapp.azure.com
      LETSENCRYPT_EMAIL: no-reply@forms.eastasia.cloudapp.azure.com
      DEBUG: formio:*
      NODE_CONFIG: '{"mongo": "mongodb://mongo:27017/formio"}'
      ROOT_EMAIL: form.admin@example.com
      ROOT_PASSWORD: PASSNOTSECURE
    stdin_open: true # -i
    tty: true # -t

  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs:ro
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro

  letsencrypt-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-letsencrypt
    volumes:
      - ./certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from:
      - nginx-proxy

volumes:
  mdb-data:
